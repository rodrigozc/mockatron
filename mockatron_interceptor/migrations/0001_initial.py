# -*- coding: utf-8 -*-
# Generated by Django 1.9.8 on 2016-07-28 21:56
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Agent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('protocol', models.CharField(max_length=16)),
                ('host', models.CharField(max_length=128)),
                ('port', models.IntegerField(default=80)),
                ('path', models.CharField(max_length=1024)),
                ('method', models.CharField(max_length=16)),
                ('content_type', models.CharField(blank=True, max_length=64, null=True)),
                ('responder', models.CharField(choices=[('SIMPLE_MOCK_RESPONDER', 'Simple Mock Responder'), ('FILTER_MOCK_RESPONDER', 'Filter Mock Responder')], default='SIMPLE_MOCK_RESPONDER', max_length=64)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='Filter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=256)),
                ('header_or_query_param', models.CharField(blank=True, max_length=64, null=True)),
                ('agent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mockatron_interceptor.Agent')),
            ],
        ),
        migrations.CreateModel(
            name='Operation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128)),
                ('input_message', models.CharField(max_length=128)),
                ('output_message', models.CharField(blank=True, max_length=128, null=True)),
                ('agent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mockatron_interceptor.Agent')),
            ],
        ),
        migrations.CreateModel(
            name='RequestCondition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('operator', models.CharField(choices=[('EQUALS', 'Equals'), ('CONTAINS', 'Contains'), ('STARTS_WITH', 'Starts With'), ('ENDS_WITH', 'Ends With'), ('REGEX', 'Regular Expression')], max_length=16)),
                ('value', models.CharField(max_length=256)),
                ('field_type', models.CharField(choices=[('CONTENT', 'Content'), ('HEADER', 'HTTP Header'), ('QUERY_PARAM', 'Query Parameter')], max_length=32)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Response',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=256)),
                ('http_code', models.IntegerField(choices=[(200, '(200) OK'), (500, '(500) Internal Server Error'), (100, '(100) Continue'), (101, '(101) Switching Protocols'), (201, '(201) Created'), (202, '(202) Accepted'), (203, '(203) Non-Authoritative Information'), (204, '(204) No Content'), (205, '(205) Reset Content'), (206, '(206) Partial Content'), (300, '(300) Multiple Choices'), (301, '(301) Moved Permanently'), (302, '(302) Found'), (303, '(303) See Other'), (304, '(304) Not Modified'), (305, '(305) Use Proxy'), (306, '(306) (Unused)'), (307, '(307) Temporary Redirect'), (400, '(400) Bad Request'), (401, '(401) Unauthorized'), (402, '(402) Payment Required'), (403, '(403) Forbidden'), (404, '(404) Not Found'), (405, '(405) Method Not Allowed'), (406, '(406) Not Acceptable'), (407, '(407) Proxy Authentication Required'), (408, '(408) Request Timeout'), (409, '(409) Conflict'), (410, '(410) Gone'), (411, '(411) Length Required'), (412, '(412) Precondition Failed'), (413, '(413) Request Entity Too Large'), (414, '(414) Request-URI Too Long'), (415, '(415) Unsupported Media Type'), (416, '(416) Requested Range Not Satisfiable'), (417, '(417) Expectation Failed'), (501, '(501) Not Implemented'), (502, '(502) Bad Gateway'), (503, '(503) Service Unavailable'), (504, '(504) Gateway Timeout'), (505, '(505) HTTP Version Not Supported')], default=200)),
                ('content', models.TextField()),
                ('enable', models.BooleanField(default=True)),
                ('agent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='mockatron_interceptor.Agent')),
                ('operation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='mockatron_interceptor.Operation')),
            ],
        ),
        migrations.CreateModel(
            name='ResponseCondition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('operator', models.CharField(choices=[('EQUALS', 'Equals'), ('CONTAINS', 'Contains'), ('STARTS_WITH', 'Starts With'), ('ENDS_WITH', 'Ends With'), ('REGEX', 'Regular Expression')], max_length=16)),
                ('value', models.CharField(max_length=256)),
                ('field_type', models.CharField(choices=[('LABEL', 'Label'), ('HTTP_CODE', 'HTTP Code')], max_length=32)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='filter',
            name='request_condition',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='request_condition', to='mockatron_interceptor.RequestCondition'),
        ),
        migrations.AddField(
            model_name='filter',
            name='response_conditions',
            field=models.ManyToManyField(related_name='response_conditions', to='mockatron_interceptor.ResponseCondition'),
        ),
    ]
